diff --git a/dist/lib/resource/files/ts/__name__.controller.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.controller.__specFileSuffix__.ts
deleted file mode 100644
index 17e58435f19ce66f9b8d4d82ff3736c43a908712..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.controller.ts b/dist/lib/resource/files/ts/__name__.controller.ts
deleted file mode 100644
index 8d1b7b4a65dbd8b0b6a431b5448294cb2edd14c2..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.interface.ts b/dist/lib/resource/files/ts/__name__.interface.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f0da1bab336a157eadba257a3416a8ece2dbaace
--- /dev/null
+++ b/dist/lib/resource/files/ts/__name__.interface.ts
@@ -0,0 +1,4 @@
+import { BaseService } from '@common';
+import { <%= classify(name) %>Model } from './models/<%= name %>.model';
+
+export abstract class I<%= classify(name) %>Service extends BaseService<<%= classify(name) %>Model> {}
diff --git a/dist/lib/resource/files/ts/__name__.module.ts b/dist/lib/resource/files/ts/__name__.module.ts
index 78a5afc4cd647621d9b5c71419d418a6bd64e21d..e78cb970791ecd9304efaa994661562dc170a03b 100644
--- a/dist/lib/resource/files/ts/__name__.module.ts
+++ b/dist/lib/resource/files/ts/__name__.module.ts
@@ -1,9 +1,29 @@
 import { Module } from '@nestjs/common';
+import { MongooseModule } from '@nestjs/mongoose';
+import { Create<%= classify(name) %>Handler } from './handlers/create-<%= name %>.handler';
+import { GetAll<%= classify(name) %>PaginatedHandler } from './handlers/get-all-<%= name %>-paginated.handler';
+import { GetOne<%= classify(name) %>ByIdHandler } from './handlers/get-one-<%= name %>-by-id.handler';
+import { Remove<%= classify(name) %>ByIdHandler } from './handlers/remove-<%= name %>-by-id.handler';
+import { Update<%= classify(name) %>ByIdHandler } from './handlers/update-<%= name %>-by-id.handler';
+import { <%= classify(name) %>Model, <%= classify(name) %>Schema } from './models/<%= name %>.model';
+import { I<%= classify(name) %>Service } from './<%= name %>.interface';
+import { <%= classify(name) %>Resolver } from './<%= name %>.resolver';
 import { <%= classify(name) %>Service } from './<%= name %>.service';
-<% if (type === 'rest' || type === 'microservice') { %>import { <%= classify(name) %>Controller } from './<%= name %>.controller';<% } %><% if (type === 'graphql-code-first' || type === 'graphql-schema-first') { %>import { <%= classify(name) %>Resolver } from './<%= name %>.resolver';<% } %><% if (type === 'ws') { %>import { <%= classify(name) %>Gateway } from './<%= name %>.gateway';<% } %>
 
 @Module({
-  <% if (type === 'rest' || type === 'microservice') { %>controllers: [<%= classify(name) %>Controller],
-  providers: [<%= classify(name) %>Service],<% } else if (type === 'graphql-code-first' || type === 'graphql-schema-first') { %>providers: [<%= classify(name) %>Resolver, <%= classify(name) %>Service],<% } else { %>providers: [<%= classify(name) %>Gateway, <%= classify(name) %>Service],<% } %>
+	imports: [MongooseModule.forFeature([{ name: <%= classify(name) %>Model.name, schema: <%= classify(name) %>Schema }])],
+	providers: [
+		{
+			provide: I<%= classify(name) %>Service,
+			useClass: <%= classify(name) %>Service
+		},
+		<%= classify(name) %>Resolver,
+		Create<%= classify(name) %>Handler,
+		GetAll<%= classify(name) %>PaginatedHandler,
+		GetOne<%= classify(name) %>ByIdHandler,
+		Remove<%= classify(name) %>ByIdHandler,
+		Update<%= classify(name) %>ByIdHandler
+	],
+	exports: [I<%= classify(name) %>Service]
 })
 export class <%= classify(name) %>Module {}
diff --git a/dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts
deleted file mode 100644
index 2ef2c6fcae7e0990141c3bc062c112c42b9cfe9e..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.resolver.ts b/dist/lib/resource/files/ts/__name__.resolver.ts
index 534518e70c284c07be4297f9d4acbc55c0493b2e..447b775774de55311c0c0f00d7a5176480405ac7 100644
--- a/dist/lib/resource/files/ts/__name__.resolver.ts
+++ b/dist/lib/resource/files/ts/__name__.resolver.ts
@@ -1,60 +1,44 @@
-import { Resolver<% if (crud && type === 'graphql-schema-first') { %>, Query, Mutation, Args<% } else if (crud && type === 'graphql-code-first') { %>, Query, Mutation, Args, Int<% } %> } from '@nestjs/graphql';
-import { <%= classify(name) %>Service } from './<%= name %>.service';<% if (crud && type === 'graphql-code-first') { %>
-import { <%= singular(classify(name)) %> } from './entities/<%= singular(name) %>.entity';<% } %><% if (crud) { %>
-import { Create<%= singular(classify(name)) %>Input } from './dto/create-<%= singular(name) %>.input';
-import { Update<%= singular(classify(name)) %>Input } from './dto/update-<%= singular(name) %>.input';<% } %>
-
-<% if (type === 'graphql-code-first' && crud) { %>@Resolver(() => <%= singular(classify(name)) %>)<% } else if (type === 'graphql-code-first') {%>@Resolver()<% } else { %>@Resolver('<%= singular(classify(name)) %>')<% } %>
+import { CommandBus } from '@nestjs/cqrs';
+import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
+import { Create<%= classify(name) %>Command } from './commands/create-<%= name %>.command';
+import { GetAll<%= classify(name) %>PaginatedCommand } from './commands/get-all-<%= name %>-paginated.command';
+import { GetOne<%= classify(name) %>ByIdCommand } from './commands/get-one-<%= name %>-by-id.command';
+import { Remove<%= classify(name) %>ByIdCommand } from './commands/remove-<%= name %>-by-id.command';
+import { Update<%= classify(name) %>ByIdCommand } from './commands/update-<%= name %>-by-id.command';
+import { Create<%= classify(name) %>Input } from './dto/create-<%= name %>.input';
+import { Update<%= classify(name) %>ByIdInput } from './dto/update-<%= name %>-by-id.input';
+import { <%= classify(name) %>Model } from './models/<%= name %>.model';
+import { GetAll<%= classify(name) %>Args, <%= classify(name) %>Paginated } from './<%= name %>.schema';
+
+@Resolver(() => <%= classify(name) %>Model)
 export class <%= classify(name) %>Resolver {
-  constructor(private readonly <%= lowercased(name) %>Service: <%= classify(name) %>Service) {}<% if (crud && type === 'graphql-code-first') { %>
-
-  @Mutation(() => <%= singular(classify(name)) %>)
-  create<%= singular(classify(name)) %>(@Args('create<%= singular(classify(name)) %>Input') create<%= singular(classify(name)) %>Input: Create<%= singular(classify(name)) %>Input) {
-    return this.<%= lowercased(name) %>Service.create(create<%= singular(classify(name)) %>Input);
-  }
-
-  @Query(() => [<%= singular(classify(name)) %>], { name: '<%= lowercased(classify(name)) %>' })
-  findAll() {
-    return this.<%= lowercased(name) %>Service.findAll();
-  }
-
-  @Query(() => <%= singular(classify(name)) %>, { name: '<%= lowercased(singular(classify(name))) %>' })
-  findOne(@Args('id', { type: () => Int }) id: number) {
-    return this.<%= lowercased(name) %>Service.findOne(id);
-  }
-
-  @Mutation(() => <%= singular(classify(name)) %>)
-  update<%= singular(classify(name)) %>(@Args('update<%= singular(classify(name)) %>Input') update<%= singular(classify(name)) %>Input: Update<%= singular(classify(name)) %>Input) {
-    return this.<%= lowercased(name) %>Service.update(update<%= singular(classify(name)) %>Input.id, update<%= singular(classify(name)) %>Input);
-  }
-
-  @Mutation(() => <%= singular(classify(name)) %>)
-  remove<%= singular(classify(name)) %>(@Args('id', { type: () => Int }) id: number) {
-    return this.<%= lowercased(name) %>Service.remove(id);
-  }<% } else if (crud && type === 'graphql-schema-first') {%>
-
-  @Mutation('create<%= singular(classify(name)) %>')
-  create(@Args('create<%= singular(classify(name)) %>Input') create<%= singular(classify(name)) %>Input: Create<%= singular(classify(name)) %>Input) {
-    return this.<%= lowercased(name) %>Service.create(create<%= singular(classify(name)) %>Input);
-  }
-
-  @Query('<%= lowercased(classify(name)) %>')
-  findAll() {
-    return this.<%= lowercased(name) %>Service.findAll();
-  }
-
-  @Query('<%= lowercased(singular(classify(name))) %>')
-  findOne(@Args('id') id: number) {
-    return this.<%= lowercased(name) %>Service.findOne(id);
-  }
-
-  @Mutation('update<%= singular(classify(name)) %>')
-  update(@Args('update<%= singular(classify(name)) %>Input') update<%= singular(classify(name)) %>Input: Update<%= singular(classify(name)) %>Input) {
-    return this.<%= lowercased(name) %>Service.update(update<%= singular(classify(name)) %>Input.id, update<%= singular(classify(name)) %>Input);
-  }
-
-  @Mutation('remove<%= singular(classify(name)) %>')
-  remove(@Args('id') id: number) {
-    return this.<%= lowercased(name) %>Service.remove(id);
-  }<% } %>
+	constructor(private readonly commandBus: CommandBus) {}
+
+	@Query(() => <%= classify(name) %>Paginated)
+	getAll<%= classify(name) %>Paginated(@Args('query', { nullable: true }) query: GetAll<%= classify(name) %>Args) {
+		return this.commandBus.execute(new GetAll<%= classify(name) %>PaginatedCommand({ query }));
+	}
+
+	@Query(() => <%= classify(name) %>Model)
+	getOne<%= classify(name) %>(@Args('id') id: string) {
+		return this.commandBus.execute(new GetOne<%= classify(name) %>ByIdCommand({ id }));
+	}
+
+	@Mutation(() => <%= classify(name) %>Model)
+	create<%= classify(name) %>(@Args('data') data: Create<%= classify(name) %>Input) {
+		return this.commandBus.execute(new Create<%= classify(name) %>Command({ data }));
+	}
+
+	@Mutation(() => <%= classify(name) %>Model)
+	update<%= classify(name) %>(
+		@Args('id') id: string,
+		@Args('data', { nullable: true }) data: Update<%= classify(name) %>ByIdInput
+	) {
+		return this.commandBus.execute(new Update<%= classify(name) %>ByIdCommand({ id, data }));
+	}
+
+	@Mutation(() => <%= classify(name) %>Model)
+	remove<%= classify(name) %>(@Args('id') id: string) {
+		return this.commandBus.execute(new Remove<%= classify(name) %>ByIdCommand({ id }));
+	}
 }
diff --git a/dist/lib/resource/files/ts/__name__.schema.ts b/dist/lib/resource/files/ts/__name__.schema.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b22cc17b9c3fc0394b6b8d4fe33c4c0ce2e5bdd0
--- /dev/null
+++ b/dist/lib/resource/files/ts/__name__.schema.ts
@@ -0,0 +1,29 @@
+import { GetAllArgs, PaginationResponse } from '@common';
+import { Field, InputType, ObjectType } from '@nestjs/graphql';
+import { IsObject, IsOptional } from 'class-validator';
+import JSON from 'graphql-type-json';
+import { translate } from '@app/modules/i18n/i18n.helper';
+import { FindOptionsOrder, FindOptionsWhere } from 'typeorm';
+import { <%= classify(name) %>Model } from './models/<%= name %>.model';
+
+@ObjectType()
+export class <%= classify(name) %>Paginated {
+	@Field(() => [<%= classify(name) %>Model])
+	data!: <%= classify(name) %>Model[];
+
+	@Field(() => PaginationResponse)
+	pagination!: PaginationResponse;
+}
+
+@InputType()
+export class GetAll<%= classify(name) %>Args extends GetAllArgs {
+	@Field(() => JSON, { nullable: true })
+	@IsOptional()
+	@IsObject({ message: translate('validation.IS_JSON') })
+	filter?: FindOptionsWhere<<%= classify(name) %>Model> | FindOptionsWhere<<%= classify(name) %>Model>[];
+
+	@Field(() => JSON, { nullable: true })
+	@IsOptional()
+	@IsObject({ message: translate('validation.IS_JSON') })
+	order?: FindOptionsOrder<<%= classify(name) %>Model>;
+}
diff --git a/dist/lib/resource/files/ts/__name__.service.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.service.__specFileSuffix__.ts
deleted file mode 100644
index 2b3f38b0f51c556a070d19fff7b3f6d840470730..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.service.ts b/dist/lib/resource/files/ts/__name__.service.ts
index 21943aa0987dd8dd020596bede4f801c686bff6d..6281b4da611e02855f6104e98c0e4978151cf0f5 100644
--- a/dist/lib/resource/files/ts/__name__.service.ts
+++ b/dist/lib/resource/files/ts/__name__.service.ts
@@ -1,28 +1,14 @@
-import { Injectable } from '@nestjs/common';<% if (crud && type !== 'graphql-code-first' && type !== 'graphql-schema-first') { %>
-import { Create<%= singular(classify(name)) %>Dto } from './dto/create-<%= singular(name) %>.dto';
-import { Update<%= singular(classify(name)) %>Dto } from './dto/update-<%= singular(name) %>.dto';<% } else if (crud) { %>
-import { Create<%= singular(classify(name)) %>Input } from './dto/create-<%= singular(name) %>.input';
-import { Update<%= singular(classify(name)) %>Input } from './dto/update-<%= singular(name) %>.input';<% } %>
+import { Injectable, UnauthorizedException } from '@nestjs/common';
+import { InjectModel } from '@nestjs/mongoose';
+import { Model } from 'mongoose';
+import { <%= classify(name) %>Model } from './models/<%= name %>.model';
+import { I<%= classify(name) %>Service } from './<%= name %>.interface';
 
 @Injectable()
-export class <%= classify(name) %>Service {<% if (crud) { %>
-  create(<% if (type !== 'graphql-code-first' && type !== 'graphql-schema-first') { %>create<%= singular(classify(name)) %>Dto: Create<%= singular(classify(name)) %>Dto<% } else { %>create<%= singular(classify(name)) %>Input: Create<%= singular(classify(name)) %>Input<% } %>) {
-    return 'This action adds a new <%= lowercased(singular(classify(name))) %>';
-  }
+export class <%= classify(name) %>Service extends I<%= classify(name) %>Service {
+	notFoundMessage = 'Không tìm thấy <%= classify(name) %>';
 
-  findAll() {
-    return `This action returns all <%= lowercased(classify(name)) %>`;
-  }
-
-  findOne(id: number) {
-    return `This action returns a #${id} <%= lowercased(singular(classify(name))) %>`;
-  }
-
-  update(id: number, <% if (type !== 'graphql-code-first' && type !== 'graphql-schema-first') { %>update<%= singular(classify(name)) %>Dto: Update<%= singular(classify(name)) %>Dto<% } else { %>update<%= singular(classify(name)) %>Input: Update<%= singular(classify(name)) %>Input<% } %>) {
-    return `This action updates a #${id} <%= lowercased(singular(classify(name))) %>`;
-  }
-
-  remove(id: number) {
-    return `This action removes a #${id} <%= lowercased(singular(classify(name))) %>`;
-  }
-<% } %>}
+	constructor(@InjectModel(<%= classify(name) %>Model.name) private readonly <%= lowercased(name) %>Model: Model<<%= classify(name) %>Model>) {
+		super(<%= lowercased(name) %>Model);
+	}
+}
diff --git a/dist/lib/resource/files/ts/commands/create-__name@singular__.command.ts b/dist/lib/resource/files/ts/commands/create-__name@singular__.command.ts
new file mode 100644
index 0000000000000000000000000000000000000000..926784c0380526c4794b51902d2e4dff189fa4f6
--- /dev/null
+++ b/dist/lib/resource/files/ts/commands/create-__name@singular__.command.ts
@@ -0,0 +1,9 @@
+import { Create<%= classify(name) %>Input } from '../dto/create-<%= name %>.input';
+
+export class Create<%= classify(name) %>Command {
+	data!: Create<%= classify(name) %>Input;
+
+	constructor(data: Create<%= classify(name) %>Command) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/commands/get-all-__name@singular__-paginated.command.ts b/dist/lib/resource/files/ts/commands/get-all-__name@singular__-paginated.command.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9442c652a6a9fd2b8b3dd8412b8ba4a50a3ae086
--- /dev/null
+++ b/dist/lib/resource/files/ts/commands/get-all-__name@singular__-paginated.command.ts
@@ -0,0 +1,9 @@
+import { PaginationDto } from '@common';
+
+export class GetAll<%= classify(name) %>PaginatedCommand {
+	query!: PaginationDto;
+
+	constructor(data: GetAll<%= classify(name) %>PaginatedCommand) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/commands/get-one-__name@singular__-by-id.command.ts b/dist/lib/resource/files/ts/commands/get-one-__name@singular__-by-id.command.ts
new file mode 100644
index 0000000000000000000000000000000000000000..203b7b4099d02ad7369785bbed5a24a40b60fc2a
--- /dev/null
+++ b/dist/lib/resource/files/ts/commands/get-one-__name@singular__-by-id.command.ts
@@ -0,0 +1,7 @@
+export class GetOne<%= classify(name) %>ByIdCommand {
+	id!: string;
+
+	constructor(data: GetOne<%= classify(name) %>ByIdCommand) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/commands/remove-__name@singular__-by-id.command.ts b/dist/lib/resource/files/ts/commands/remove-__name@singular__-by-id.command.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b4a39483e712e1509b77428fc441a7dbc3685932
--- /dev/null
+++ b/dist/lib/resource/files/ts/commands/remove-__name@singular__-by-id.command.ts
@@ -0,0 +1,7 @@
+export class Remove<%= classify(name) %>ByIdCommand {
+	id!: string;
+
+	constructor(data: Remove<%= classify(name) %>ByIdCommand) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/commands/update-__name@singular__-by-id.command.ts b/dist/lib/resource/files/ts/commands/update-__name@singular__-by-id.command.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c5852e9f6c0b32a1f10a0e15eec6b69f3ba6e530
--- /dev/null
+++ b/dist/lib/resource/files/ts/commands/update-__name@singular__-by-id.command.ts
@@ -0,0 +1,10 @@
+import { Update<%= classify(name) %>ByIdInput } from '../dto/update-<%= name %>-by-id.input';
+
+export class Update<%= classify(name) %>ByIdCommand {
+	id!: string;
+	data!: Update<%= classify(name) %>ByIdInput;
+
+	constructor(data: Update<%= classify(name) %>ByIdCommand) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts b/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
index db822a4c2c6aff30b48ebbc767f2d622b68a4de9..59b6b6c9d48e88f2ef96d9aa2aaadda83934d841 100644
--- a/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
+++ b/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
@@ -1 +1 @@
-export class Create<%= singular(classify(name)) %>Dto {}
+export class Create<%= classify(name) %>Dto {}
diff --git a/dist/lib/resource/files/ts/dto/create-__name@singular__.input.ts b/dist/lib/resource/files/ts/dto/create-__name@singular__.input.ts
index f13dd09eeca373a2c2b953783c80539d8266e946..ceec6cd001f49bb6fd09b9c62adeb711f5fdc68e 100644
--- a/dist/lib/resource/files/ts/dto/create-__name@singular__.input.ts
+++ b/dist/lib/resource/files/ts/dto/create-__name@singular__.input.ts
@@ -1,7 +1,11 @@
-<% if (type === 'graphql-code-first') { %>import { InputType, Int, Field } from '@nestjs/graphql';
+import { IsNotEmpty, IsString } from '@common';
+import { Field, InputType } from '@nestjs/graphql';
 
 @InputType()
-export class Create<%= singular(classify(name)) %>Input {
-  @Field(() => Int, { description: 'Example field (placeholder)' })
-  exampleField: number;
-}<% } else { %>export class Create<%= singular(classify(name)) %>Input {}<% } %>
+export class Create<%= classify(name) %>Input {
+	/** Name */
+	@Field({ description: 'Name' })
+	@IsString()
+	@IsNotEmpty()
+	name!: string;
+}
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.dto.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..11335d1a36106042570c3b50089c5514ee7dcc7f
--- /dev/null
+++ b/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.dto.ts
@@ -0,0 +1,5 @@
+import { InputType, PartialType } from '@nestjs/graphql';
+import { Create<%= classify(name) %>Input } from './create-<%= name %>.input';
+
+@InputType()
+export class Update<%= classify(name) %>ByIdInput extends PartialType(Create<%= classify(name) %>Input) {}
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.input.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.input.ts
new file mode 100644
index 0000000000000000000000000000000000000000..42710807d7949b721bd175213896330c01b6cb94
--- /dev/null
+++ b/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.input.ts
@@ -0,0 +1,11 @@
+import { IsNotEmpty, IsString } from '@common';
+import { Field, InputType } from '@nestjs/graphql';
+
+@InputType()
+export class Update<%= classify(name) %>ByIdInput {
+	/** Name */
+	@Field({ description: 'Name', nullable: true })
+	@IsString()
+	@IsNotEmpty()
+	name?: string;
+}
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__.dto.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__.dto.ts
deleted file mode 100644
index 4a54569c32683fddf02801dd5f3e6598ed5a3888..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__.input.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__.input.ts
deleted file mode 100644
index 3d0d3fa086ea98a9ab8784652d81821868eba85c..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts b/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts
deleted file mode 100644
index 362e741b403a8216353797d2235f07e2ac77719b..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/handlers/create-__name__.handler.ts b/dist/lib/resource/files/ts/handlers/create-__name__.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4cd62bb8c47fefcb2a945a5b2c0eac773d865d36
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/create-__name__.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { Create<%= classify(name) %>Command } from '../commands/create-<%= name %>.command';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(Create<%= classify(name) %>Command)
+export class Create<%= classify(name) %>Handler implements ICommandHandler<Create<%= classify(name) %>Command> {
+	private logger = new Logger(Create<%= classify(name) %>Handler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: Create<%= classify(name) %>Command) {
+		this.logger.debug('execute');
+		const { data } = command;
+		return this.<%= lowercased(name) %>Service.create(data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/get-all-__name__-paginated.handler.ts b/dist/lib/resource/files/ts/handlers/get-all-__name__-paginated.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6ed046b6fc78f17e46cec0b7ce10f2bc49d1d28a
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/get-all-__name__-paginated.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { GetAll<%= classify(name) %>PaginatedCommand } from '../commands/get-all-<%= name %>-paginated.command';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(GetAll<%= classify(name) %>PaginatedCommand)
+export class GetAll<%= classify(name) %>PaginatedHandler implements ICommandHandler<GetAll<%= classify(name) %>PaginatedCommand> {
+	private logger = new Logger(GetAll<%= classify(name) %>PaginatedHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: GetAll<%= classify(name) %>PaginatedCommand) {
+		this.logger.log(command);
+		const { query } = command;
+		return this.<%= lowercased(name) %>Service.getAllPaginated(query);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/get-one-__name__-by-id.handler.ts b/dist/lib/resource/files/ts/handlers/get-one-__name__-by-id.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c097658e1e452a0f59c5e01e66be906c63d4b5d1
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/get-one-__name__-by-id.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { GetOne<%= classify(name) %>ByIdCommand } from '../commands/get-one-<%= name %>-by-id.command';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(GetOne<%= classify(name) %>ByIdCommand)
+export class GetOne<%= classify(name) %>ByIdHandler implements ICommandHandler<GetOne<%= classify(name) %>ByIdCommand> {
+	private logger = new Logger(GetOne<%= classify(name) %>ByIdHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: GetOne<%= classify(name) %>ByIdCommand) {
+		this.logger.log(command);
+		const { id } = command;
+		return this.<%= lowercased(name) %>Service.getOneByIdOrFail(id);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/remove-__name__-by-id.handler.ts b/dist/lib/resource/files/ts/handlers/remove-__name__-by-id.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2b9a4e5bf400888a00d58738c77639d0fb4be9c4
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/remove-__name__-by-id.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { Remove<%= classify(name) %>ByIdCommand } from '../commands/remove-<%= name %>-by-id.command';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(Remove<%= classify(name) %>ByIdCommand)
+export class Remove<%= classify(name) %>ByIdHandler implements ICommandHandler<Remove<%= classify(name) %>ByIdCommand> {
+	private logger = new Logger(Remove<%= classify(name) %>ByIdHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: Remove<%= classify(name) %>ByIdCommand) {
+		this.logger.log(command);
+		const { id } = command;
+		return this.<%= lowercased(name) %>Service.softRemoveById(id);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/update-__name__-by-id.handler.ts b/dist/lib/resource/files/ts/handlers/update-__name__-by-id.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7a8ef0a457b7d202baee724910977a2f359c3e20
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/update-__name__-by-id.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { Update<%= classify(name) %>ByIdCommand } from '../commands/update-<%= name %>-by-id.command';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(Update<%= classify(name) %>ByIdCommand)
+export class Update<%= classify(name) %>ByIdHandler implements ICommandHandler<Update<%= classify(name) %>ByIdCommand> {
+	private logger = new Logger(Update<%= classify(name) %>ByIdHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: Update<%= classify(name) %>ByIdCommand) {
+		this.logger.log(command);
+		const { id, data } = command;
+		return this.<%= lowercased(name) %>Service.updateById(id, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/models/__name__.model.ts b/dist/lib/resource/files/ts/models/__name__.model.ts
new file mode 100644
index 0000000000000000000000000000000000000000..46aba593402fa8bdfda0119e19b34811f0a7a1f9
--- /dev/null
+++ b/dist/lib/resource/files/ts/models/__name__.model.ts
@@ -0,0 +1,17 @@
+import { BaseModel, Schema, createSchema } from '@common';
+import { HydratedDocument } from 'mongoose';
+import { Prop } from '@nestjs/mongoose';
+import { ObjectType, Field } from '@nestjs/graphql';
+
+export type <%= classify(name) %>Document = HydratedDocument<<%= classify(name) %>Model> & BaseModel;
+
+@ObjectType('<%= classify(name) %>')
+@Schema('<%= dashed(name) %>')
+export class <%= classify(name) %>Model extends BaseModel {
+	/** name */
+	@Field()
+	@Prop()
+	name!: string;
+}
+
+export const <%= classify(name) %>Schema = createSchema(<%= classify(name) %>Model);
diff --git a/dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/__name__.gateway.__specFileSuffix__.ts
similarity index 78%
rename from dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts
rename to dist/lib/resource/files/ts/test/__name__.gateway.__specFileSuffix__.ts
index 8f8b5be075c514ef98eb0d9a1c680272175bb414..80ee30c833b36561c5ecc09fda279245255f9646 100644
--- a/dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts
+++ b/dist/lib/resource/files/ts/test/__name__.gateway.__specFileSuffix__.ts
@@ -1,6 +1,6 @@
 import { Test, TestingModule } from '@nestjs/testing';
-import { <%= classify(name) %>Gateway } from './<%= name %>.gateway';
-import { <%= classify(name) %>Service } from './<%= name %>.service';
+import { <%= classify(name) %>Gateway } from '../<%= name %>.gateway';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
 
 describe('<%= classify(name) %>Gateway', () => {
   let gateway: <%= classify(name) %>Gateway;
diff --git a/dist/lib/resource/files/ts/test/__name__.service.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/__name__.service.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..652152a8e82e631a9912f31c5ce8cf04e88867f3
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/__name__.service.__specFileSuffix__.ts
@@ -0,0 +1,32 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { getModelToken } from '@nestjs/mongoose';
+import { <%= classify(name) %>Model } from '../models/<%= name %>.model';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+const mock<%= classify(name) %>Model = jest.fn().mockReturnValue({});
+
+describe('<%= classify(name) %>Service', () => {
+	let service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				},
+				{
+					provide: getModelToken(<%= classify(name) %>Model.name),
+					useValue: mock<%= classify(name) %>Model
+				}
+			]
+		}).compile();
+
+		service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(service).toBeDefined();
+	});
+});
diff --git a/dist/lib/resource/files/ts/test/create-__name__.handler.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/create-__name__.handler.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4b70efaa2c6c2eb8dcdc0d50d757ed55854528c8
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/create-__name__.handler.__specFileSuffix__.ts
@@ -0,0 +1,40 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { Create<%= classify(name) %>Command } from '../commands/create-<%= name %>.command';
+import { Create<%= classify(name) %>Handler } from '../handlers/create-<%= name %>.handler';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+jest.mock('../<%= name %>.service');
+
+describe('Create<%= classify(name) %>Handler', () => {
+	let handler: Create<%= classify(name) %>Handler;
+	let <%= lowercased(name) %>Service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				Create<%= classify(name) %>Handler,
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				}
+			]
+		}).compile();
+
+		handler = module.get<Create<%= classify(name) %>Handler>(Create<%= classify(name) %>Handler);
+		<%= lowercased(name) %>Service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(handler).toBeDefined();
+	});
+
+	it('should call <%= lowercased(name) %>Service.create with the provided data', async () => {
+		const create<%= classify(name) %>Command = new Create<%= classify(name) %>Command({ data: { name: '<%= name %>' } });
+
+		await handler.execute(create<%= classify(name) %>Command);
+		const { data } = create<%= classify(name) %>Command;
+
+		expect(<%= lowercased(name) %>Service.create).toHaveBeenCalledWith(data);
+	});
+});
diff --git a/dist/lib/resource/files/ts/test/get-all-__name__-paginated.handler.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/get-all-__name__-paginated.handler.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..bb278fb706d7f400ad6c218bb39c961bf3d83715
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/get-all-__name__-paginated.handler.__specFileSuffix__.ts
@@ -0,0 +1,45 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { GetAll<%= classify(name) %>PaginatedCommand } from '../commands/get-all-<%= name %>-paginated.command';
+import { GetAll<%= classify(name) %>PaginatedHandler } from '../handlers/get-all-<%= name %>-paginated.handler';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+jest.mock('../<%= name %>.service');
+
+describe('GetAll<%= classify(name) %>PaginatedHandler', () => {
+	let handler: GetAll<%= classify(name) %>PaginatedHandler;
+	let <%= lowercased(name) %>Service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				GetAll<%= classify(name) %>PaginatedHandler,
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				}
+			]
+		}).compile();
+
+		handler = module.get<GetAll<%= classify(name) %>PaginatedHandler>(GetAll<%= classify(name) %>PaginatedHandler);
+		<%= lowercased(name) %>Service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(handler).toBeDefined();
+	});
+
+	it('should call <%= lowercased(name) %>Service.getAllPaginated with the provided query', async () => {
+		const getAll<%= classify(name) %>PaginatedCommand = new GetAll<%= classify(name) %>PaginatedCommand({
+			query: {
+				limit: 10,
+				page: 1
+			}
+		});
+
+		await handler.execute(getAll<%= classify(name) %>PaginatedCommand);
+		const { query } = getAll<%= classify(name) %>PaginatedCommand;
+
+		expect(<%= lowercased(name) %>Service.getAllPaginated).toHaveBeenCalledWith(query);
+	});
+});
diff --git a/dist/lib/resource/files/ts/test/get-one-__name__-by-id.handler.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/get-one-__name__-by-id.handler.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..08fd2c67ac4489756f7fdec9ce5bc632ee900d2e
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/get-one-__name__-by-id.handler.__specFileSuffix__.ts
@@ -0,0 +1,43 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { v4 as uuidv4 } from 'uuid';
+import { GetOne<%= classify(name) %>ByIdCommand } from '../commands/get-one-<%= name %>-by-id.command';
+import { GetOne<%= classify(name) %>ByIdHandler } from '../handlers/get-one-<%= name %>-by-id.handler';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+jest.mock('../<%= name %>.service');
+
+describe('GetOne<%= classify(name) %>ByIdHandler', () => {
+	let handler: GetOne<%= classify(name) %>ByIdHandler;
+	let <%= lowercased(name) %>Service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				GetOne<%= classify(name) %>ByIdHandler,
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				}
+			]
+		}).compile();
+
+		handler = module.get<GetOne<%= classify(name) %>ByIdHandler>(GetOne<%= classify(name) %>ByIdHandler);
+		<%= lowercased(name) %>Service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(handler).toBeDefined();
+	});
+
+	it('should call <%= lowercased(name) %>Service.getOneByIdOrFail with the provided id', async () => {
+		const getOne<%= classify(name) %>ByIdCommand = new GetOne<%= classify(name) %>ByIdCommand({
+			id: uuidv4()
+		});
+
+		await handler.execute(getOne<%= classify(name) %>ByIdCommand);
+		const { id } = getOne<%= classify(name) %>ByIdCommand;
+
+		expect(<%= lowercased(name) %>Service.getOneByIdOrFail).toHaveBeenCalledWith(id);
+	});
+});
diff --git a/dist/lib/resource/files/ts/test/remove-__name__-by-id.handler.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/remove-__name__-by-id.handler.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6ba46c46fd3cba9f230e169d0b736dafa6e9cff0
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/remove-__name__-by-id.handler.__specFileSuffix__.ts
@@ -0,0 +1,43 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { v4 as uuidv4 } from 'uuid';
+import { Remove<%= classify(name) %>ByIdCommand } from '../commands/remove-<%= name %>-by-id.command';
+import { Remove<%= classify(name) %>ByIdHandler } from '../handlers/remove-<%= name %>-by-id.handler';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+jest.mock('../<%= name %>.service');
+
+describe('Remove<%= classify(name) %>ByIdHandler', () => {
+	let handler: Remove<%= classify(name) %>ByIdHandler;
+	let <%= lowercased(name) %>Service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				Remove<%= classify(name) %>ByIdHandler,
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				}
+			]
+		}).compile();
+
+		handler = module.get<Remove<%= classify(name) %>ByIdHandler>(Remove<%= classify(name) %>ByIdHandler);
+		<%= lowercased(name) %>Service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(handler).toBeDefined();
+	});
+
+	it('should call <%= lowercased(name) %>Service.softRemoveById with the provided id', async () => {
+		const remove<%= classify(name) %>ByIdCommand = new Remove<%= classify(name) %>ByIdCommand({
+			id: uuidv4()
+		});
+
+		await handler.execute(remove<%= classify(name) %>ByIdCommand);
+		const { id } = remove<%= classify(name) %>ByIdCommand;
+
+		expect(<%= lowercased(name) %>Service.softRemoveById).toHaveBeenCalledWith(id);
+	});
+});
diff --git a/dist/lib/resource/files/ts/test/update-__name__-by-id.handler.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/update-__name__-by-id.handler.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..861b210ce5606e6d2c6a776b1abdb461caf9592d
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/update-__name__-by-id.handler.__specFileSuffix__.ts
@@ -0,0 +1,44 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { v4 as uuidv4 } from 'uuid';
+import { Update<%= classify(name) %>ByIdCommand } from '../commands/update-<%= name %>-by-id.command';
+import { Update<%= classify(name) %>ByIdHandler } from '../handlers/update-<%= name %>-by-id.handler';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+jest.mock('../<%= name %>.service');
+
+describe('Update<%= classify(name) %>ByIdHandler', () => {
+	let handler: Update<%= classify(name) %>ByIdHandler;
+	let <%= lowercased(name) %>Service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				Update<%= classify(name) %>ByIdHandler,
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				}
+			]
+		}).compile();
+
+		handler = module.get<Update<%= classify(name) %>ByIdHandler>(Update<%= classify(name) %>ByIdHandler);
+		<%= lowercased(name) %>Service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(handler).toBeDefined();
+	});
+
+	it('should call <%= lowercased(name) %>Service.create with the provided data', async () => {
+		const update<%= classify(name) %>ByIdCommand = new Update<%= classify(name) %>ByIdCommand({
+			id: uuidv4(),
+			data: { name: '<%= name %>' }
+		});
+
+		await handler.execute(update<%= classify(name) %>ByIdCommand);
+		const { id, data } = update<%= classify(name) %>ByIdCommand;
+
+		expect(<%= lowercased(name) %>Service.updateById).toHaveBeenCalledWith(id, data);
+	});
+});
diff --git a/dist/lib/resource/resource.factory.js b/dist/lib/resource/resource.factory.js
index ec9b4863032c162a38178959d9c6a027f9d0e651..62d2f15135ae50e5e525b0ffe7fe3f236864ebcd 100644
--- a/dist/lib/resource/resource.factory.js
+++ b/dist/lib/resource/resource.factory.js
@@ -91,6 +91,7 @@ function generate(options) {
             },
             singular: (name) => pluralize.singular(name),
             ent: (name) => name + '.entity',
+            dashed: (name) => name.split('-').join('_')
         }),
         (0, schematics_1.move)(options.path),
     ])(context);
