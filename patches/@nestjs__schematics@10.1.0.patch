diff --git a/dist/lib/resource/files/ts/__name__.controller.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.controller.__specFileSuffix__.ts
deleted file mode 100644
index 17e58435f19ce66f9b8d4d82ff3736c43a908712..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.controller.ts b/dist/lib/resource/files/ts/__name__.controller.ts
index 8d1b7b4a65dbd8b0b6a431b5448294cb2edd14c2..c6c4f3ba3a2a24bbdaa24054a9fb930ac95dbcfd 100644
--- a/dist/lib/resource/files/ts/__name__.controller.ts
+++ b/dist/lib/resource/files/ts/__name__.controller.ts
@@ -1,63 +1,48 @@
-<% if (crud && type === 'rest') { %>import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';<%
-} else if (crud && type === 'microservice') { %>import { Controller } from '@nestjs/common';
-import { MessagePattern, Payload } from '@nestjs/microservices';<%
-} else { %>import { Controller } from '@nestjs/common';<%
-} %>
-import { <%= classify(name) %>Service } from './<%= name %>.service';<% if (crud) { %>
-import { Create<%= singular(classify(name)) %>Dto } from './dto/create-<%= singular(name) %>.dto';
-import { Update<%= singular(classify(name)) %>Dto } from './dto/update-<%= singular(name) %>.dto';<% } %>
-
-<% if (type === 'rest') { %>@Controller('<%= dasherize(name) %>')<% } else { %>@Controller()<% } %>
+import { ApiCreate, ApiDelete, ApiGetAll, ApiGetOne, ApiUpdate, HideController } from '@common';
+import { Body, Controller, Delete, Get, Param, Patch, Post, Query } from '@nestjs/common';
+import { CommandBus } from '@nestjs/cqrs';
+import { ApiParam, ApiTags } from '@nestjs/swagger';
+import { Create<%= classify(name) %>Dto } from './dto/create-<%= name %>.dto';
+import { GetAll<%= classify(name) %>PaginatedDto } from './dto/get-all-<%= name %>-paginated.dto';
+import { GetOne<%= classify(name) %>ByIdDto } from './dto/get-one-<%= name %>-by-id.dto';
+import { Remove<%= classify(name) %>ByIdDto } from './dto/remove-<%= name %>-by-id.dto';
+import { Update<%= classify(name) %>ByIdDto } from './dto/update-<%= name %>-by-id.dto';
+import { <%= classify(name) %>Entity } from './entities/<%= name %>.entity';
+
+@Controller('<%= name %>')
+@ApiTags('<%= classify(name) %> API')
+@HideController()
 export class <%= classify(name) %>Controller {
-  constructor(private readonly <%= lowercased(name) %>Service: <%= classify(name) %>Service) {}<% if (type === 'rest' && crud) { %>
-
-  @Post()
-  create(@Body() create<%= singular(classify(name)) %>Dto: Create<%= singular(classify(name)) %>Dto) {
-    return this.<%= lowercased(name) %>Service.create(create<%= singular(classify(name)) %>Dto);
-  }
-
-  @Get()
-  findAll() {
-    return this.<%= lowercased(name) %>Service.findAll();
-  }
-
-  @Get(':id')
-  findOne(@Param('id') id: string) {
-    return this.<%= lowercased(name) %>Service.findOne(+id);
-  }
-
-  @Patch(':id')
-  update(@Param('id') id: string, @Body() update<%= singular(classify(name)) %>Dto: Update<%= singular(classify(name)) %>Dto) {
-    return this.<%= lowercased(name) %>Service.update(+id, update<%= singular(classify(name)) %>Dto);
-  }
-
-  @Delete(':id')
-  remove(@Param('id') id: string) {
-    return this.<%= lowercased(name) %>Service.remove(+id);
-  }<% } else if (type === 'microservice' && crud) { %>
-
-  @MessagePattern('create<%= singular(classify(name)) %>')
-  create(@Payload() create<%= singular(classify(name)) %>Dto: Create<%= singular(classify(name)) %>Dto) {
-    return this.<%= lowercased(name) %>Service.create(create<%= singular(classify(name)) %>Dto);
-  }
-
-  @MessagePattern('findAll<%= classify(name) %>')
-  findAll() {
-    return this.<%= lowercased(name) %>Service.findAll();
-  }
-
-  @MessagePattern('findOne<%= singular(classify(name)) %>')
-  findOne(@Payload() id: number) {
-    return this.<%= lowercased(name) %>Service.findOne(id);
-  }
-
-  @MessagePattern('update<%= singular(classify(name)) %>')
-  update(@Payload() update<%= singular(classify(name)) %>Dto: Update<%= singular(classify(name)) %>Dto) {
-    return this.<%= lowercased(name) %>Service.update(update<%= singular(classify(name)) %>Dto.id, update<%= singular(classify(name)) %>Dto);
-  }
-
-  @MessagePattern('remove<%= singular(classify(name)) %>')
-  remove(@Payload() id: number) {
-    return this.<%= lowercased(name) %>Service.remove(id);
-  }<% } %>
+	constructor(private readonly commandBus: CommandBus) {}
+
+	@Post()
+	@ApiCreate(<%= classify(name) %>Entity, '<%= classify(name) %>')
+	create(@Body() create<%= classify(name) %>Dto: Create<%= classify(name) %>Dto) {
+		return this.commandBus.execute(new Create<%= classify(name) %>Dto(create<%= classify(name) %>Dto));
+	}
+
+	@Get()
+	@ApiGetAll(<%= classify(name) %>Entity, '<%= classify(name) %>')
+	getAll(@Query() query: GetAll<%= classify(name) %>PaginatedDto) {
+		return this.commandBus.execute(new GetAll<%= classify(name) %>PaginatedDto(query));
+	}
+
+	@Get(':id')
+	@ApiGetOne(<%= classify(name) %>Entity, '<%= classify(name) %>')
+	@ApiParam({ name: 'id', description: 'Truyền all nếu muốn lấy tất cả' })
+	getOne(@Param('id') id: string) {
+		return this.commandBus.execute(new GetOne<%= classify(name) %>ByIdDto({ id }));
+	}
+
+	@Patch(':id')
+	@ApiUpdate(<%= classify(name) %>Entity, '<%= classify(name) %>')
+	update(@Param('id') id: string, @Body() update<%= classify(name) %>Dto: Update<%= classify(name) %>ByIdDto) {
+		return this.commandBus.execute(new Update<%= classify(name) %>ByIdDto({ ...update<%= classify(name) %>Dto, id }));
+	}
+
+	@Delete(':id')
+	@ApiDelete(<%= classify(name) %>Entity, '<%= classify(name) %>')
+	remove(@Param('id') id: string) {
+		return this.commandBus.execute(new Remove<%= classify(name) %>ByIdDto({ id }));
+	}
 }
diff --git a/dist/lib/resource/files/ts/__name__.interface.ts b/dist/lib/resource/files/ts/__name__.interface.ts
new file mode 100644
index 0000000000000000000000000000000000000000..128197f7804619bc2ba80dcea7791db373c92ae5
--- /dev/null
+++ b/dist/lib/resource/files/ts/__name__.interface.ts
@@ -0,0 +1,4 @@
+import { BaseService } from '@common';
+import { <%= classify(name) %>Entity } from './entities/<%= name %>.entity';
+
+export abstract class I<%= classify(name) %>Service extends BaseService<<%= classify(name) %>Entity> {}
diff --git a/dist/lib/resource/files/ts/__name__.module.ts b/dist/lib/resource/files/ts/__name__.module.ts
index 78a5afc4cd647621d9b5c71419d418a6bd64e21d..49f189567bc9b8c226378dc88070db17fe973a9b 100644
--- a/dist/lib/resource/files/ts/__name__.module.ts
+++ b/dist/lib/resource/files/ts/__name__.module.ts
@@ -1,9 +1,29 @@
 import { Module } from '@nestjs/common';
+import { TypeOrmModule } from '@nestjs/typeorm';
+import { <%= classify(name) %>Entity } from './entities/<%= name %>.entity';
+import { Create<%= classify(name) %>Handler } from './handlers/create-<%= name %>.handler';
+import { GetAll<%= classify(name) %>PaginatedHandler } from './handlers/get-all-<%= name %>-paginated.handler';
+import { GetOne<%= classify(name) %>ByIdHandler } from './handlers/get-one-<%= name %>-by-id.handler';
+import { Remove<%= classify(name) %>ByIdHandler } from './handlers/remove-<%= name %>-by-id.handler';
+import { Update<%= classify(name) %>ByIdHandler } from './handlers/update-<%= name %>-by-id.handler';
+import { <%= classify(name) %>Controller } from './<%= name %>.controller';
+import { I<%= classify(name) %>Service } from './<%= name %>.interface';
 import { <%= classify(name) %>Service } from './<%= name %>.service';
-<% if (type === 'rest' || type === 'microservice') { %>import { <%= classify(name) %>Controller } from './<%= name %>.controller';<% } %><% if (type === 'graphql-code-first' || type === 'graphql-schema-first') { %>import { <%= classify(name) %>Resolver } from './<%= name %>.resolver';<% } %><% if (type === 'ws') { %>import { <%= classify(name) %>Gateway } from './<%= name %>.gateway';<% } %>
 
 @Module({
-  <% if (type === 'rest' || type === 'microservice') { %>controllers: [<%= classify(name) %>Controller],
-  providers: [<%= classify(name) %>Service],<% } else if (type === 'graphql-code-first' || type === 'graphql-schema-first') { %>providers: [<%= classify(name) %>Resolver, <%= classify(name) %>Service],<% } else { %>providers: [<%= classify(name) %>Gateway, <%= classify(name) %>Service],<% } %>
+	imports: [TypeOrmModule.forFeature([<%= classify(name) %>Entity])],
+	controllers: [<%= classify(name) %>Controller],
+	providers: [
+		{
+			provide: I<%= classify(name) %>Service,
+			useClass: <%= classify(name) %>Service
+		},
+		Create<%= classify(name) %>Handler,
+		GetAll<%= classify(name) %>PaginatedHandler,
+		GetOne<%= classify(name) %>ByIdHandler,
+		Remove<%= classify(name) %>ByIdHandler,
+		Update<%= classify(name) %>ByIdHandler
+	],
+	exports: [I<%= classify(name) %>Service]
 })
 export class <%= classify(name) %>Module {}
diff --git a/dist/lib/resource/files/ts/__name__.service.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.service.__specFileSuffix__.ts
deleted file mode 100644
index 2b3f38b0f51c556a070d19fff7b3f6d840470730..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.service.ts b/dist/lib/resource/files/ts/__name__.service.ts
index 21943aa0987dd8dd020596bede4f801c686bff6d..acdc2226a24787525b59286983d20b71f65e4e20 100644
--- a/dist/lib/resource/files/ts/__name__.service.ts
+++ b/dist/lib/resource/files/ts/__name__.service.ts
@@ -1,28 +1,14 @@
-import { Injectable } from '@nestjs/common';<% if (crud && type !== 'graphql-code-first' && type !== 'graphql-schema-first') { %>
-import { Create<%= singular(classify(name)) %>Dto } from './dto/create-<%= singular(name) %>.dto';
-import { Update<%= singular(classify(name)) %>Dto } from './dto/update-<%= singular(name) %>.dto';<% } else if (crud) { %>
-import { Create<%= singular(classify(name)) %>Input } from './dto/create-<%= singular(name) %>.input';
-import { Update<%= singular(classify(name)) %>Input } from './dto/update-<%= singular(name) %>.input';<% } %>
+import { Injectable } from '@nestjs/common';
+import { InjectRepository } from '@nestjs/typeorm';
+import { Repository } from 'typeorm';
+import { <%= classify(name) %>Entity } from './entities/<%= name %>.entity';
+import { I<%= classify(name) %>Service } from './<%= name %>.interface';
 
 @Injectable()
-export class <%= classify(name) %>Service {<% if (crud) { %>
-  create(<% if (type !== 'graphql-code-first' && type !== 'graphql-schema-first') { %>create<%= singular(classify(name)) %>Dto: Create<%= singular(classify(name)) %>Dto<% } else { %>create<%= singular(classify(name)) %>Input: Create<%= singular(classify(name)) %>Input<% } %>) {
-    return 'This action adds a new <%= lowercased(singular(classify(name))) %>';
-  }
+export class <%= classify(name) %>Service extends I<%= classify(name) %>Service {
+	notFoundMessage = 'Không tìm thấy <%= classify(name) %>';
 
-  findAll() {
-    return `This action returns all <%= lowercased(classify(name)) %>`;
-  }
-
-  findOne(id: number) {
-    return `This action returns a #${id} <%= lowercased(singular(classify(name))) %>`;
-  }
-
-  update(id: number, <% if (type !== 'graphql-code-first' && type !== 'graphql-schema-first') { %>update<%= singular(classify(name)) %>Dto: Update<%= singular(classify(name)) %>Dto<% } else { %>update<%= singular(classify(name)) %>Input: Update<%= singular(classify(name)) %>Input<% } %>) {
-    return `This action updates a #${id} <%= lowercased(singular(classify(name))) %>`;
-  }
-
-  remove(id: number) {
-    return `This action removes a #${id} <%= lowercased(singular(classify(name))) %>`;
-  }
-<% } %>}
+	constructor(@InjectRepository(<%= classify(name) %>Entity) private readonly <%= lowercased(name) %>Repo: Repository<<%= classify(name) %>Entity>) {
+		super(<%= lowercased(name) %>Repo);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts b/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
index db822a4c2c6aff30b48ebbc767f2d622b68a4de9..303ec6162f98ba800d516689a90bef723b1491d0 100644
--- a/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
+++ b/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
@@ -1 +1,5 @@
-export class Create<%= singular(classify(name)) %>Dto {}
+export class Create<%= classify(name) %>Dto {
+	constructor(data: Create<%= classify(name) %>Dto) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/get-all-__name@singular__-paginated.dto.ts b/dist/lib/resource/files/ts/dto/get-all-__name@singular__-paginated.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e2a3d2ef6807b52e26c64c20d406b2569aa8117f
--- /dev/null
+++ b/dist/lib/resource/files/ts/dto/get-all-__name@singular__-paginated.dto.ts
@@ -0,0 +1,8 @@
+import { PaginationDto } from '@common';
+
+export class GetAll<%= classify(name) %>PaginatedDto extends PaginationDto {
+	constructor(data: GetAll<%= classify(name) %>PaginatedDto) {
+		super();
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/get-one-__name@singular__-by-id.dto.ts b/dist/lib/resource/files/ts/dto/get-one-__name@singular__-by-id.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..09dee8758ce25152de27754512b6ed1c7055cd11
--- /dev/null
+++ b/dist/lib/resource/files/ts/dto/get-one-__name@singular__-by-id.dto.ts
@@ -0,0 +1,7 @@
+export class GetOne<%= classify(name) %>ByIdDto {
+	id!: string;
+
+	constructor(data: GetOne<%= classify(name) %>ByIdDto) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/remove-__name@singular__-by-id.dto.ts b/dist/lib/resource/files/ts/dto/remove-__name@singular__-by-id.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..5d1fb89b41029aeaedd22861b07df4856aee3e10
--- /dev/null
+++ b/dist/lib/resource/files/ts/dto/remove-__name@singular__-by-id.dto.ts
@@ -0,0 +1,7 @@
+export class Remove<%= classify(name) %>ByIdDto {
+	id!: string;
+
+	constructor(data: Remove<%= classify(name) %>ByIdDto) {
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.dto.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8d40a675d99cf082ee6af8aafc39dcb671ef95a4
--- /dev/null
+++ b/dist/lib/resource/files/ts/dto/update-__name@singular__-by-id.dto.ts
@@ -0,0 +1,12 @@
+import { ApiHideProperty, PartialType } from '@nestjs/swagger';
+import { Create<%= classify(name) %>Dto } from './create-<%= name %>.dto';
+
+export class Update<%= classify(name) %>ByIdDto extends PartialType(Create<%= classify(name) %>Dto) {
+	@ApiHideProperty()
+	id!: string;
+
+	constructor(data: Update<%= classify(name) %>ByIdDto) {
+		super();
+		Object.assign(this, data);
+	}
+}
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__.dto.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__.dto.ts
deleted file mode 100644
index 4a54569c32683fddf02801dd5f3e6598ed5a3888..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts b/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts
index 362e741b403a8216353797d2235f07e2ac77719b..9087f6cd721ce015db55e8f0d03e805e59ffd95f 100644
--- a/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts
+++ b/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts
@@ -1,7 +1,5 @@
-<% if (type === 'graphql-code-first') { %>import { ObjectType, Field, Int } from '@nestjs/graphql';
+import { BaseEntity } from '@common';
+import { Entity } from 'typeorm';
 
-@ObjectType()
-export class <%= singular(classify(name)) %> {
-  @Field(() => Int, { description: 'Example field (placeholder)' })
-  exampleField: number;
-}<% } else { %>export class <%= singular(classify(name)) %> {}<% } %>
+@Entity({ name: '<%= dashed(name) %>' })
+export class <%= classify(name) %>Entity extends BaseEntity {}
diff --git a/dist/lib/resource/files/ts/handlers/create-__name__.handler.ts b/dist/lib/resource/files/ts/handlers/create-__name__.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..20f742743a8c39e6f8f8e82594a592ca985c2084
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/create-__name__.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { Create<%= classify(name) %>Dto } from '../dto/create-<%= name %>.dto';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(Create<%= classify(name) %>Dto)
+export class Create<%= classify(name) %>Handler implements ICommandHandler<Create<%= classify(name) %>Dto> {
+	private logger = new Logger(Create<%= classify(name) %>Handler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: Create<%= classify(name) %>Dto) {
+		this.logger.debug('execute');
+		const {} = command;
+		return this.<%= lowercased(name) %>Service.create(command);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/get-all-__name__-paginated.handler.ts b/dist/lib/resource/files/ts/handlers/get-all-__name__-paginated.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..be5f045bbf9f26124d1d4f21a65616e908b6ab12
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/get-all-__name__-paginated.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { GetAll<%= classify(name) %>PaginatedDto } from '../dto/get-all-<%= name %>-paginated.dto';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(GetAll<%= classify(name) %>PaginatedDto)
+export class GetAll<%= classify(name) %>PaginatedHandler implements ICommandHandler<GetAll<%= classify(name) %>PaginatedDto> {
+	private logger = new Logger(GetAll<%= classify(name) %>PaginatedHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: GetAll<%= classify(name) %>PaginatedDto) {
+		this.logger.log(command);
+		const {} = command;
+		return this.<%= lowercased(name) %>Service.getAllPaginated(command);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/get-one-__name__-by-id.handler.ts b/dist/lib/resource/files/ts/handlers/get-one-__name__-by-id.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7c35808b08ad3e75f9a256a2cbebab2abad438e6
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/get-one-__name__-by-id.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { GetOne<%= classify(name) %>ByIdDto } from '../dto/get-one-<%= name %>-by-id.dto';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(GetOne<%= classify(name) %>ByIdDto)
+export class GetOne<%= classify(name) %>ByIdHandler implements ICommandHandler<GetOne<%= classify(name) %>ByIdDto> {
+	private logger = new Logger(GetOne<%= classify(name) %>ByIdHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: GetOne<%= classify(name) %>ByIdDto) {
+		this.logger.log(command);
+		const { id } = command;
+		return this.<%= lowercased(name) %>Service.getOneByIdOrFail(id);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/remove-__name__-by-id.handler.ts b/dist/lib/resource/files/ts/handlers/remove-__name__-by-id.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..fec825584fd0f013a5f264ad18bd0dc4f6812fb7
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/remove-__name__-by-id.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { Remove<%= classify(name) %>ByIdDto } from '../dto/remove-<%= name %>-by-id.dto';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(Remove<%= classify(name) %>ByIdDto)
+export class Remove<%= classify(name) %>ByIdHandler implements ICommandHandler<Remove<%= classify(name) %>ByIdDto> {
+	private logger = new Logger(Remove<%= classify(name) %>ByIdHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: Remove<%= classify(name) %>ByIdDto) {
+		this.logger.log(command);
+		const { id } = command;
+		return this.<%= lowercased(name) %>Service.softRemoveById(id);
+	}
+}
diff --git a/dist/lib/resource/files/ts/handlers/update-__name__-by-id.handler.ts b/dist/lib/resource/files/ts/handlers/update-__name__-by-id.handler.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6aedbde2d85c0881d40384f04e52f0cdd7545cfa
--- /dev/null
+++ b/dist/lib/resource/files/ts/handlers/update-__name__-by-id.handler.ts
@@ -0,0 +1,17 @@
+import { Logger } from '@nestjs/common';
+import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
+import { Update<%= classify(name) %>ByIdDto } from '../dto/update-<%= name %>-by-id.dto';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+
+@CommandHandler(Update<%= classify(name) %>ByIdDto)
+export class Update<%= classify(name) %>ByIdHandler implements ICommandHandler<Update<%= classify(name) %>ByIdDto> {
+	private logger = new Logger(Update<%= classify(name) %>ByIdHandler.name);
+
+	constructor(private readonly <%= lowercased(name) %>Service: I<%= classify(name) %>Service) {}
+
+	async execute(command: Update<%= classify(name) %>ByIdDto) {
+		this.logger.log(command);
+		const { id } = command;
+		return this.<%= lowercased(name) %>Service.updateById(id, command);
+	}
+}
diff --git a/dist/lib/resource/files/ts/test/__name__.controller.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/__name__.controller.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7dbb1cbadd1a94e72f7b7428e5cb74675b2b8c89
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/__name__.controller.__specFileSuffix__.ts
@@ -0,0 +1,28 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { <%= classify(name) %>Controller } from '../<%= name %>.controller';
+import { I<%= classify(name) %>Handler } from '../<%= name %>.interface';
+import { <%= classify(name) %>Handler } from '../<%= name %>.handler';
+
+jest.mock('../<%= name %>.handler');
+
+describe('<%= classify(name) %>Controller', () => {
+	let controller: <%= classify(name) %>Controller;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			controllers: [<%= classify(name) %>Controller],
+			providers: [
+				{
+					provide: I<%= classify(name) %>Handler,
+					useClass: <%= classify(name) %>Handler
+				}
+			]
+		}).compile();
+
+		controller = module.get<<%= classify(name) %>Controller>(<%= classify(name) %>Controller);
+	});
+
+	it('should be defined', () => {
+		expect(controller).toBeDefined();
+	});
+});
diff --git a/dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/__name__.gateway.__specFileSuffix__.ts
similarity index 78%
rename from dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts
rename to dist/lib/resource/files/ts/test/__name__.gateway.__specFileSuffix__.ts
index 8f8b5be075c514ef98eb0d9a1c680272175bb414..80ee30c833b36561c5ecc09fda279245255f9646 100644
--- a/dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts
+++ b/dist/lib/resource/files/ts/test/__name__.gateway.__specFileSuffix__.ts
@@ -1,6 +1,6 @@
 import { Test, TestingModule } from '@nestjs/testing';
-import { <%= classify(name) %>Gateway } from './<%= name %>.gateway';
-import { <%= classify(name) %>Service } from './<%= name %>.service';
+import { <%= classify(name) %>Gateway } from '../<%= name %>.gateway';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
 
 describe('<%= classify(name) %>Gateway', () => {
   let gateway: <%= classify(name) %>Gateway;
diff --git a/dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/__name__.resolver.__specFileSuffix__.ts
similarity index 74%
rename from dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts
rename to dist/lib/resource/files/ts/test/__name__.resolver.__specFileSuffix__.ts
index 2ef2c6fcae7e0990141c3bc062c112c42b9cfe9e..38800fb52fe2376d2bb147283a90cc0daf941dd8 100644
--- a/dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts
+++ b/dist/lib/resource/files/ts/test/__name__.resolver.__specFileSuffix__.ts
@@ -1,6 +1,8 @@
 import { Test, TestingModule } from '@nestjs/testing';
-import { <%= classify(name) %>Resolver } from './<%= name %>.resolver';
-import { <%= classify(name) %>Service } from './<%= name %>.service';
+import { <%= classify(name) %>Resolver } from '../<%= name %>.resolver';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+
+jest.mock('../<%= name %>.service');
 
 describe('<%= classify(name) %>Resolver', () => {
   let resolver: <%= classify(name) %>Resolver;
diff --git a/dist/lib/resource/files/ts/test/__name__.service.__specFileSuffix__.ts b/dist/lib/resource/files/ts/test/__name__.service.__specFileSuffix__.ts
new file mode 100644
index 0000000000000000000000000000000000000000..653f454bd51db4e5405f5269cf26b665a8dbac9b
--- /dev/null
+++ b/dist/lib/resource/files/ts/test/__name__.service.__specFileSuffix__.ts
@@ -0,0 +1,31 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { getRepositoryToken } from '@nestjs/typeorm';
+import { I<%= classify(name) %>Service } from '../<%= name %>.interface';
+import { <%= classify(name) %>Service } from '../<%= name %>.service';
+import { <%= classify(name) %>Entity } from '../entities/<%= name %>.entity';
+import { <%= classify(name) %>Repository } from '../mocks/<%= name %>.repository';
+
+describe('<%= classify(name) %>Service', () => {
+	let service: I<%= classify(name) %>Service;
+
+	beforeEach(async () => {
+		const module: TestingModule = await Test.createTestingModule({
+			providers: [
+				{
+					provide: I<%= classify(name) %>Service,
+					useClass: <%= classify(name) %>Service
+				},
+				{
+					provide: getRepositoryToken(<%= classify(name) %>Entity),
+					useFactory: <%= classify(name) %>Repository
+				}
+			]
+		}).compile();
+
+		service = module.get<I<%= classify(name) %>Service>(I<%= classify(name) %>Service);
+	});
+
+	it('should be defined', () => {
+		expect(service).toBeDefined();
+	});
+});
diff --git a/dist/lib/resource/resource.factory.js b/dist/lib/resource/resource.factory.js
index ec9b4863032c162a38178959d9c6a027f9d0e651..62d2f15135ae50e5e525b0ffe7fe3f236864ebcd 100644
--- a/dist/lib/resource/resource.factory.js
+++ b/dist/lib/resource/resource.factory.js
@@ -91,6 +91,7 @@ function generate(options) {
             },
             singular: (name) => pluralize.singular(name),
             ent: (name) => name + '.entity',
+            dashed: (name) => name.split('-').join('_')
         }),
         (0, schematics_1.move)(options.path),
     ])(context);
